Author: Jan Rusnacko (jrusnack at redhat.com)

===============================================================================
								DEVELOPMENT COMMENTS
===============================================================================


1. FEATURES
----------------------
a) compatible with JUnit
b) compatible with TestNG
c) available for freestyle projects
d) available for multiconfiguration (matrix) projects
e) for matrix projects, allow filtering of results based on filtered conmfiguration
f) display results
g) implements Dashboard View plugin`s portlet interface, so our results can be 
	viewed from	dashboard


2. NAMING CONVENTION
--------------------

Project type is either matrix or freestyle:

		Project = {matrix/multiconf, freestyle} 

Matrix/multiconf. project has several configurations:

		Project
			* Configuration #1 (X= ..., Y= ...)
			* Configuration #2 (X= ..., Y= ...)

One Jenkins Project has several builds. 

		Project
			* Build #1
			* Build #2
			* ...

If Project is matrix, then it`s builds have several matrix runs, and each run 
corresponds to a configuration:
		
		Project
			* Build #1
				* Run (X= ..., Y= ...)
				* Run (X= ..., Y= ...)
			* Build #2
				* Run (X= ..., Y= ...)
				* Run (X= ..., Y= ...)

ATTENTION: If Project is freestyle, we say it has exactly one run (even though 
it does not really) and this run is equal to the build. This is artificially 
defined as such to allow concurrently developed tcmsPlugin use our parser (
mapping Jenkins`s projects, builds and runs will become consistent)

		Project
			* Build #1
				* Run == Build #1
			* Build #2
				* Run == Build #2


If Project is matrix project, each build 

3. STRUCTURE
------------------------

a) Parser and classes representing results

For parsing TestNG xmls we will use/modify parser from TestNG plugin. To parse 
JUnit, we will use Jenkins`s internal JUnit parser 
(jenkins/core/src/main/java/hudson/tasks/junit/JUnitParser.java ). This alone 
creates a problem: JUnitParser outputs TestResult, which is final class that we 
are unable to modify. Therefore, we will create one parser, that will parse any 
(JUnit or TestNG) results xml and internally will use either of the two parsers.
Output will be our new class TestResults.

Second issue is adding support for multiconfiguration projects. We will require 
filtering of test results (ad. 1e), so we want to implement another class 
Filter, that will represent which configurations to include and which don`t. 
Filter will be added to TestResults and after that getters will include only 
filtered output (ie. getFailedTestCount will sum failed tests only from configs 
that pass filter). This will provide easy handling when creating reports/graphs.

Third issue is use of our parser in tcmsPlugin (developed concurrently). To be 
more usable, we need to structure our results in such a way that they follow 
tcms workflow more closely. This is the reason why we add interface RunTestResults.
Also, to allow effortless upload, we offer two ways of getting results from
TestResults for freestyle projects: they can be obtained directly 
(TestResults.getFailedCount ...) or indirectly 
(TestResults.getTestRunResults.get(0).getFailedCount). Reason why we implement 
also indirect method is that this way tcmsPlugin can simply iterate over all runs
under TestResults and upload their results ignoring type of project (matrix of free).
This also allows easier mapping of structures between Jenkins and nitrate. Reason
why we must implement direct method is explained in former paragraph (filtering).



						-------------------------
						| 	abstract BaseResult	|
						-------------------------
								|		|
				-----------------		---------
				|								|
		---------------------		-----------------------------
		| MatrixRunTestRes	|		|	abstract TestResults	|
		---------------------		-----------------------------


	----------------------------------------------------- 
	|			abstract class TestResults				|
	|													|
	|	- getFailedTestCount							|
	|	- getPassedTestCount							|
	|	- isMulticonfiguration							|
	|	- getTestRunRes									|
	|													|
	-----------------------------------------------------
				|						|					
				|						|
		---------						---------
		|										|
		|										|
	---------------------		-----------------------------
	|  FreestyleTestRes	|		|	MatrixBuildTestResults	|
	|					|		|							|
	---------------------		| - getMatrixRunTestResults	|
								-----------------------------



			-------------------------
			| interface RunTestRes 	|
			-------------------------
				|			|
		---------			-------------
		|								|
	-------------------------	-------------------------
	|	MatrixRunTestRes	|	|	FreeStyleTestRes	|
	-------------------------	-------------------------



4. DIRECTION
------------

Right now focus only on developing TestNG part of thigs.

In second iteration, add JUnit support, which might break some classes and methods
(MatrixRunTestResults.getTestList ??)


5. POSSIBLE BUGS, GOTCHAS ...
------------------------------

a) How to handle change of axes in multiconfiguration project - maybe we don`t 
even have to hanlde anything, maybe it will broke everything. 

6. POSSIBLE EXTENSIONS
----------------------

a) Reduction of parser runs

Since we develop also tcmsPlugin, we decided that these two will use the same 
parser, developed as a part of this plugin. This also creates one issue: if both
are enabled for project, for each build parser will be called twice. So we might
want to research possiblitity of adding our TestResults to the build directly, 
and both plugins would first search, if these results are present, and only after 
that parse XMLs. This way only one of those will actually call parser. Note that 
we cannot make use of Jenkins`s internal parser, because it outputs Jenkins`s 
TestResults.


